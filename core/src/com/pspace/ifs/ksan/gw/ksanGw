#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""

import sys, os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
try:
    from service.gw import *
    from server.server_manage import *
except (ModuleNotFoundError, ImportError) as e:
    print('python common module is not installed')
    sys.exit(-1)

import pdb


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanGw {init|start|stop|restart|status}
                init                                                                    : Add  Service
                start                                                                   : Start Service 
                stop                                                                    : Stop Service 
                restart                                                                 : Restart Service 
                status                                                                  : Display Service info
"""
        print(Usage)

if __name__ == '__main__':
    usage = "Usage: ksanGw {init|start|stop|restart|status}"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='debug mode')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    ret, conf = read_conf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf['mgs']['MgsIp']
        IfsPortalPort = int(conf['mgs']['IfsPortalPort'])
        IfsMqPort = int(conf['mgs']['MqPort'])

    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    gw = KsanGW(logger)
    if args[0] == 'init':
        sys.exit(0)

    elif args[0] == 'start':
        gw.Start()

    elif args[0] == 'stop':
        gw.Stop()

    elif args[0] == 'restart':
        gw.Stop()

    elif args[0] == 'status':
        gw.Status()

    else:
        parser.print_help()
    """
    elif args[0] == 'update':
        Res, Errmsg, Ret = UpdateServiceInfo(IfsPortalIp, IfsPortalPort, options.ServiceId, Name=options.Name,
                                             ServiceType=options.ServiceType,
                                             GroupId=options.GroupId, Description=options.Description, State=options.State,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_state':
        Res, Errmsg, Ret = UpdateServiceState(IfsPortalIp, IfsPortalPort, options.ServiceId, State=options.State,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_usage':
        Res, Errmsg, Ret = UpdateServiceUsage(IfsPortalIp, IfsPortalPort, options.ServiceId,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'config':
        Res, Errmsg, Ret = UpdateServiceConf(IfsPortalIp, IfsPortalPort, options.ServiceId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] in ['start', 'stop']:
        Res, Errmsg, Ret = ControlService(IfsPortalIp, IfsPortalPort, options.ServiceId, args[0], logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'list':
        if options.Detail:
            Res, Errmsg, Ret, Data = GetAllServerDetailInfo(IfsPortalIp, IfsPortalPort,logger=logger)
        else:
            Res, Errmsg, Ret, Data = GetServiceInfo(IfsPortalIp, IfsPortalPort,logger=logger)

        if Res == ResOk:
            print(Ret.Result, Ret.Message)
            if options.Detail:
                ShowServiceInfoWithServerInfo(Data, Detail=options.Detail)
            else:
                ShowServiceInfo(Data, Detail=options.Detail)
        else:
            print(Errmsg)
    """
