#!/usr/bin/python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""


import os, sys

from subprocess import Popen, PIPE
import socket
from optparse import OptionParser
from common.shcommand import UpdateEtcHosts
from common.utils import CreatePidFile
import json
import re

MongDbCluster = {'Shard1Port': 20001, 'Shard2Port': 20002, 'ConfigServerPort': 50000, 'MongoDbPort': 27017}

def shcall(command):
    """
    Executes a command and returns the result
    """
    try:
        p = Popen(command, shell=True, stdout=PIPE, stderr=PIPE, close_fds=True, universal_newlines=True)
    except (OSError, ValueError) as err:
        return '', err
    return p.communicate()


def GetHostInfo():
    try:
        hostname = socket.gethostname()
        ip = socket.gethostbyname(hostname)
        return True, hostname, ip
    except socket.error as err:
        return False, str(err), None


MongoVersion = '4.4'
MongoYumRepoFile = '/etc/yum.repos.d/mongodb-org-%s.repo' % MongoVersion
MongoDbLogPath = '/var/log/ksan/mongodb'
MongoDbHomeDir = '/var/lib/mongo'
KsanMongoPath = '/usr/local/ksan/mongo'

ShardStartCmd = "%s/shard.start" % KsanMongoPath
ShardStopCmd = "%s/shard.stop" % KsanMongoPath
ConfigdStartCmd = "%s/configd.start" % KsanMongoPath
ConfigdStopCmd = "%s/configd.stop" % KsanMongoPath
MongosStartCmd = "%s/mongos.start" % KsanMongoPath
MongosStopCmd = "%s/mongos.stop" % KsanMongoPath


def InstallMongo():
    with open(MongoYumRepoFile, 'w') as f:
        YumConf = """
[mongodb-org-%s]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/%s/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-%s.asc
sslverify=0
        """ % (MongoVersion, MongoVersion, MongoVersion)
        f.write(YumConf)
    YumCmd = "yum clean all; yum repolist; yum install -y mongodb-org"
    out, err = shcall(YumCmd)

def SetMongosCmd(Shard1Port, Shard2Port, ConfigServerPort, MongoDbPort):
    if not os.path.exists(KsanMongoPath):
        os.makedirs(KsanMongoPath)

    # create start shard command
    with open(ShardStartCmd, 'w') as f:
        Contents = """
        #Shard1Port:%s 
        #Shard2Port:%s 
        mongod --shardsvr --bind_ip_all --dbpath %s/shard1 --port %s --replSet reps%s --logpath %s/shard1 &
        mongod --shardsvr --bind_ip_all --dbpath %s/shard2 --port %s --replSet reps%s --logpath %s/shard2 &
        """ % (Shard1Port, Shard2Port, MongoDbHomeDir, Shard1Port, Shard1Port, MongoDbLogPath, MongoDbHomeDir,
               Shard2Port, Shard2Port, MongoDbLogPath)
        f.write(Contents)

    # create stop shard command
    with open(ShardStopCmd, 'w') as f:
        Contents = "kill -9 $(ps -ef |grep \"mongod --shardsvr \" |grep -v grep|awk '{print $2}')"
        f.write(Contents)

    # create start configd command
    with open(ConfigdStartCmd, 'w') as f:
        Contents = """
        #ConfigServerPort:%s
        mongod --configsvr --bind_ip_all --dbpath %s/configd --port %s --replSet repsc --logpath %s/configdb &
        """ % (ConfigServerPort, MongoDbHomeDir, ConfigServerPort, MongoDbLogPath)
        f.write(Contents)

    # create stop configd command
    with open(ConfigdStopCmd, 'w') as f:
        Contents = "kill -9 $(ps -ef |grep \"mongod --configsvr \" |grep -v grep|awk '{print $2}')"
        f.write(Contents)
    # create start mongos command
    with open(MongosStartCmd, 'w') as f:
        Contents = """
        #MongoDbPort:%s
        mongos --configdb repsc/localhost:%s --port %s --bind_ip_all --logpath %s/mongos --pidfilepath /var/run/mongod.pid &
        """ % (MongoDbPort, ConfigServerPort, MongoDbPort, MongoDbLogPath)
        f.write(Contents)

    # create stop mongos command
    with open(MongosStopCmd, 'w') as f:
        Contents = "kill -9 $(ps -ef |grep \"mongos --configdb \" |grep -v grep|awk '{print $2}')"
        f.write(Contents)

    # change executable scripts mode
    out ,err = shcall("chmod +x /usr/local/ksan/mongo/*")
    print(out, err)

def StartMongoDb():
    os.system(ShardStartCmd)
    os.system(ConfigdStartCmd)
    os.system(MongosStartCmd)

def StopMongoDb():
    out, err = shcall(ShardStopCmd)
    print(out, err)
    out, err = shcall(ConfigdStopCmd)
    print(out, err)
    out, err = shcall(MongosStopCmd)
    print(out, err)

def StatusMongoDb():
    pass


def GetClusterMemberList(HostsArgs):
    ArgHostsList = HostsArgs.split()
    MemberList = list()
    for HostName in ArgHostsList:
        try:
            Ip = socket.gethostbyname(HostName)
        except socket.gaierror as err:
            print('Invalid hostname. Check /etc/hosts')
            return None
        else:
            MemberList.append((Ip, HostName))

    if len(ArgHostsList) != len(MemberList):
        print("Invalid member type is found in member argument")
    return MemberList


def InitMongos(Option):
    global MongoDbHomeDir
    """
    if Option.ClusterMembers:
        ClusterMembers = GetClusterMemberList(Option.ClusterMembers)
    else:
        ClusterMembers = list()
    if ClusterMembers is None:
        return
    """
    Shard1Port = Option.Shard1Port
    Shard2Port = Option.Shard2Port
    ConfigServerPort = Option.ConfigServerPort
    MongoDbPort = Option.MongoDbPort
    if Option.MongoDbHomeDir:
        MongoDbHomeDir = Option.MongoDbHomeDir

    # create storage directory
    if not os.path.exists(MongoDbHomeDir):
        os.makedirs(MongoDbHomeDir)
    if not os.path.exists(MongoDbHomeDir + '/configd'):
        os.makedirs('%s/configd' % MongoDbHomeDir)
    if not os.path.exists(MongoDbHomeDir + '/shard1'):
        os.makedirs('%s/shard1' % MongoDbHomeDir)
    if not os.path.exists(MongoDbHomeDir + '/shard2'):
        os.makedirs('%s/shard2' % MongoDbHomeDir)
    if not os.path.exists(MongoDbHomeDir + '/mongo'):
        os.makedirs('%s/mongo' % MongoDbHomeDir)

    if not os.path.exists(MongoDbLogPath):
        os.makedirs(MongoDbLogPath)

    # set /etc/hosts
    #UpdateEtcHosts(ClusterMembers)

    SetMongosCmd(Shard1Port, Shard2Port, ConfigServerPort, MongoDbPort)
    if Option.PrimaryNode:
        StartMongoDb()

        PrimaryNodeConfigure(Shard1Port, Shard2Port, ConfigServerPort)
        RunPrimaryCluster(Shard1Port, Shard2Port)
        StopMongoDb()

def PrimaryNodeConfigure(Shard1Port, Shard2Port, ConfigServerPort):
    SleepTime = 1
    SetClusterCmd = ""
    SetClusterCmd += "mongo --port %s --eval 'rs.initiate()';" % Shard1Port
    SetClusterCmd += 'sleep %d;' % SleepTime
    SetClusterCmd += "mongo --port %s --eval 'rs.initiate()';" % Shard1Port
    SetClusterCmd += 'sleep %d;' % SleepTime

    SetClusterCmd += "mongo --port %s --eval 'rs.initiate()';" % Shard2Port
    SetClusterCmd += 'sleep %d;' % SleepTime

    SetClusterCmd += "mongo --port %s --eval 'rs.initiate()';" % Shard2Port
    SetClusterCmd += 'sleep %d;' % SleepTime


    SetClusterCmd += "mongo --port %s --eval 'rs.initiate()';" % ConfigServerPort
    SetClusterCmd += 'sleep %d;' % SleepTime
    SetClusterCmd += "mongo --port %s --eval 'rs.initiate()';" % ConfigServerPort

    print(SetClusterCmd)
    out, err = shcall(SetClusterCmd)

def RunPrimaryCluster(Shard1Port, Shard2Port):
    out, err = shcall('hostname')
    PrimaryHostname = out[:-1]
    RunCmd = ''
    RunCmd += "mongo admin --eval 'db.runCommand({addshard:\"reps%s/%s:%s\"})';" % (Shard1Port, PrimaryHostname, Shard1Port)
    RunCmd += "mongo admin --eval 'db.runCommand({addshard:\"reps%s/%s:%s\"})';" % (Shard2Port, PrimaryHostname, Shard2Port)
    RunCmd += "mongo admin --eval 'sh.status()'"
    shcall(RunCmd)

def GetPortInfo():
    global MongDbCluster
    isValid = True
    if not os.path.exists(ShardStartCmd):
        print('Shard Start Command is not found /usr/local/ksan/mongo/')
        isValid = False
    if not os.path.exists(MongosStartCmd):
        print('MongoDB Start Command is not found /usr/local/ksan/mongo/')
        isValid = False

    if not os.path.exists(ConfigdStartCmd):
        print('ConfigServer Start Command is not found /usr/local/ksan/mongo/')
        isValid = False
    if isValid is False:
        return False
    with open(ShardStartCmd, 'r') as f:
        Cmd = f.read()
        Shard1PortFinder = re.compile('#Shard1Port:([\d]+)')
        Shard1Port = Shard1PortFinder.search(Cmd)
        if Shard1Port:
            MongDbCluster['Shard1Port'] = Shard1Port.groups()[0]
        else:
            print('Fail to get Shard1 Port')
            isValid = False

        Shard2PortFinder = re.compile('#Shard2Port:([\d]+)')
        Shard2Port = Shard2PortFinder.search(Cmd)
        if Shard2Port:
            MongDbCluster['Shard2Port'] = Shard2Port.groups()[0]
        else:
            print('Fail to get Shard2 Port')
            isValid = False

    with open(ConfigdStartCmd, 'r') as f:
        Cmd = f.read()
        ConfigServerPortFinder = re.compile('#ConfigServerPort:([\d]+)')
        ConfigServerPort = ConfigServerPortFinder.search(Cmd)
        if ConfigServerPort:
            MongDbCluster['ConfigServerPort'] = ConfigServerPort.groups()[0]
        else:
            print('Fail to get ConfigServer Port')
            isValid = False

    with open(MongosStartCmd, 'r') as f:
        Cmd = f.read()
        MongoDbPortFinder = re.compile('#MongoDbPort:([\d]+)')
        MongoDbPort = MongoDbPortFinder.search(Cmd)
        if MongoDbPort:
            MongDbCluster['MongoDbPort'] = MongoDbPort.groups()[0]
        else:
            print('Fail to get MongoDB Port')
            isValid = False
    return isValid

def AddClusterMember(HostsArgs):
    MemberHostNameList = GetClusterMemberList(HostsArgs)
    if MemberHostNameList is None:
        return

    ret = GetPortInfo()
    if ret is False:
        return
    MongoMemberAddCmd = ''
    Shard1Port = MongDbCluster['Shard1Port']
    Shard2Port = MongDbCluster['Shard2Port']
    ConfigServerPort = MongDbCluster['ConfigServerPort']

    for ip, host in MemberHostNameList:
        MongoMemberAddCmd += "mongo --port %s --eval 'rs.add(\"%s:%s\")';sleep 1;" % (Shard1Port, host, Shard1Port)

    for ip, host in MemberHostNameList:
        MongoMemberAddCmd += "mongo --port %s --eval 'rs.add(\"%s:%s\")';sleep 1;" % (Shard2Port, host, Shard2Port)

    for ip, host in MemberHostNameList:
        MongoMemberAddCmd += "mongo --port %s --eval 'rs.add(\"%s:%s\")';sleep 1;" % (ConfigServerPort, host, ConfigServerPort)

    out, err = shcall(MongoMemberAddCmd)
    print(out, err)


def RemoveClusterMember(HostsArgs):
    MemberHostNameList = GetClusterMemberList(HostsArgs)
    if MemberHostNameList is None:
        return

    ret = GetPortInfo()
    if ret is False:
        return
    MongoMemberRemoveCmd = ''
    Shard1Port = MongDbCluster['Shard1Port']
    Shard2Port = MongDbCluster['Shard2Port']
    ConfigServerPort = MongDbCluster['ConfigServerPort']

    for ip, host in MemberHostNameList:
        MongoMemberRemoveCmd += "mongo --port %s --eval 'rs.remove(\"%s:%s\")';sleep 1;" % (ConfigServerPort, host, ConfigServerPort)
        MongoMemberRemoveCmd += "mongo --port %s --eval 'rs.remove(\"%s:%s\")';sleep 1;" % (Shard2Port, host, Shard2Port)
        MongoMemberRemoveCmd += "mongo --port %s --eval 'rs.remove(\"%s:%s\")';sleep 1;" % (Shard1Port, host, Shard1Port)

    out, err = shcall(MongoMemberRemoveCmd)
    print(out, err)


def GetStatus():
    Cmd = "mongo --eval 'db.serverStatus()'"
    out, err = shcall(Cmd)
    lines = out.split("\n")
    JsonOutput = ''
    for line in lines:
        if 'MongoDB  shell' in line or 'connecting to: mongodb' in line or 'Implicit session: session' in line or 'MongoDB server version' in line:
            continue
        else:
            trimlined = line.rsplit()
            JsonOutput += ''.join(trimlined)

    HealthFinder = re.compile("state\":\"([\d\w_\-]+)\"")
    status = HealthFinder.search(JsonOutput)
    if status:
        print("%s" % status.groups()[0])
    else:
        print(JsonOutput)

def GetShardStatus():
    out, err = shcall("mongo admin --eval 'sh.status()'|grep -A 2 shards:")
    #out = """
    #  shards:
    #    {  "_id" : "reps1",  "host" : "reps1/ksan_osd1:10000,ksan_osd2:10000",  "state" : 1 }
    #    {  "_id" : "reps2",  "host" : "reps2/ksan_osd1:20000,ksan_osd2:20000",  "state" : 1 }
    #"""
    if out:
        if 'shards:' in out:
            lines = out.split('\n')
            OutPutString = ''
            ShardList = list()
            for line in lines:
                if '"_id"' in line:
                    Shard = {'id': '', 'state': '0', 'host': list()}
                    _Shard = json.loads(line)
                    Shard['id'] = _Shard['_id']
                    HostListString = re.sub('%s/' % Shard['id'], '', _Shard['host'])
                    Shard['host'] = HostListString.split(',')
                    Shard['state'] = _Shard['state']
                    ShardList.append(Shard)
            TitleLine = "-" * 42
            HostLine = "%s%s\n" % (' ' * 20, '-' * 22)
            print(TitleLine)
            print("|%s|%s|%s|" % ("ID".center(10), "Status".center(8) ,"Host:Port".center(20)))
            print(TitleLine)
            for shard in ShardList:
                IdStat = "|%s|%s" % (shard['id'].center(10), str(shard['state']).center(8))
                Host = ''
                for idx, host in enumerate(shard['host']):
                    if len(Host) == 0:
                        Host += "|%s|\n" % (host.center(20))
                        Host += "%s\n" % TitleLine
                    else:
                        Host += "%s|%s|\n" % (" " * 20, host.center(20))
                        Host += HostLine
                print(IdStat+Host)
                print(TitleLine)

class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanMongoDBManager {init|start|stop|add_member|remove_member|status} [option]
                init -P <Shard1 Port> -S <Shard2 Port> -C <Config Server Port> 
                     -D <DB Port> -H <MongoDB Home Directory> -R   : MongoDb Initialize
                
                start                                              : Start MongoDb 
                stop                                               : Stop MongoDb 
                add_member -M <HostName>                           : Add Cluster Members 
                remove_member -M <HostName>                        : Remove Cluster Members 
                status                                             : Show MongoDb status 
                status_shard                                       : Show MongoDb Shard status 
        [options]
                -M                                                 : Cluster Member. ex) "osd1 osd2"    
                -P                                                 : Shard1 Port
                -S                                                 : Shard2 Port
                -C                                                 : Config Server Port 
                -D                                                 : MongoDb Server Port 
                -H                                                 : MongoDb Home Directory 
                -R                                                 : Cluster Primary Node Flag
                -h, --help                                         : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {init|start|start_primary|stop|add_member|remove_member|status} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-M', "--Member", dest="ClusterMembers", help="Cluster Member list. <ip>:<hostname> ex -M 'osd1 osd2'")
    parser.add_option('-P', "--Shard1Port", dest="Shard1Port", default='20001', help="Shard1 Port. default 20001")
    parser.add_option('-S', "--Shard2Port", dest="Shard2Port", default='20002', help="Shard2 Port. default 20002")
    parser.add_option('-C', "--ConfigServerPort", dest="ConfigServerPort", default='50000', help="ConfigServer Port. default 50000")
    parser.add_option('-D', "--DbPort", dest="MongoDbPort", default='27017', help="MongoDb Port. default 27017")
    parser.add_option('-H', "--HomeDirectory", dest="HomeDirectory", default='/var/lib/mongo', help='MongoDB Configuration Home Directory Path')
    parser.add_option('-R', "--PrimaryNode", dest="PrimaryNode", action="store_true", default=False, help='MongoDB Primary Cluster Node Flag')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    if args[0] == 'install':
        InstallMongo()
    elif args[0] == 'init':
        InitMongos(options)
    elif args[0] == 'start':
        StartMongoDb()
    elif args[0] == 'stop':
        StopMongoDb()
    elif args[0] == 'status':
        GetStatus()
    elif args[0] == 'status_shard':
        GetShardStatus()
    elif args[0] == 'add_member':
        if not options.ClusterMembers:
            parser.print_help()
            sys.exit(-1)
        AddClusterMember(options.ClusterMembers)
    elif args[0] == 'remove_member':
        if not options.ClusterMembers:
            parser.print_help()
            sys.exit(-1)
        RemoveClusterMember(options.ClusterMembers)
    else:
        parser.print_help()
