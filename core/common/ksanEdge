#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""


import os, sys
import pdb

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from ksan.common.utils import IsDaemonRunning
from ksan.common.init import GetConf, InitMonServicedConf, UpdateConf, GetHostInfo
from ksan.network.network_mq_handle import *
from ksan.common.daemon import Daemon
from ksan.service.service_manage import *
from ksan.mqmanage.mq import *
import time
from optparse import OptionParser
import threading

# Check Network Info


# Check Disk Info
def LoadServiceList(conf, ServiceList, LocalIpList):
    Res, Errmsg, Ret, Data = GetServerInfo(conf.mgs.MgsIp, conf.mgs.IfsPortalPort, conf.mgs.ServerId)
    if Res == ResOk:
        if Ret.Result == ResultSuccess:
            for service in Data.Services:
                ServiceList['IdList'].append(service.Id)
                ServiceList['Details'][service.Id] = service
            for Interface in Data.NetworkInterfaces:
                LocalIpList.append(Interface.IpAddress)
    print(ServiceList)
    print(LocalIpList)


"""
def TmpLoadServiceList(conf, ServiceList, LocalIpList):
    Res, Errmsg, Ret, Data = GetServiceInfo(conf.mgs.MgsIp, conf.mgs.IfsPortalPort)
    #Res, Errmsg, Ret, Data = GetServerInfo(conf.mgs.MgsIp, conf.mgs.IfsPortalPort, conf.mgs.ServerId)
    if Res == ResOk:
        if Ret.Result == ResultSuccess:
            for Svc in Data.Services:
                res, errmsg, ret, data = GetServiceInfo(conf.mgs.MgsIp, conf.mgs.IfsPortalPort, ServiceId=Svc.Id)
                if res == ResOk:
                    if ret.Result == ResultSuccess:

                ServiceList['IdList'].append(service.Id)
                ServiceList['Details'][service.Id] = service
            for Interface in Data.NetworkInterfaces:
                LocalIpList.append(Interface.IpAddress)
    print(ServiceList)
    print(LocalIpList)
"""

def AddNewRoutingKeyWithServerId(conf):
    """
    Add Rpc routing Key to Routing Key List
    """
    EdgeRoutingKeyList.append("*.servers.%s.interfaces.add" % conf.mgs.ServerId)
    EdgeRoutingKeyList.append("*.servers.%s.interfaces.update" % conf.mgs.ServerId)

    EdgeRoutingKeyList.append("*.servers.%s.disks.write_disk_id" % conf.mgs.ServerId)
    EdgeRoutingKeyList.append("*.servers.%s.disks.check_mount" % conf.mgs.ServerId)

    EdgeRoutingKeyList.append("*.services.%s.config.gw.load" % conf.mgs.ServerId)
    EdgeRoutingKeyList.append("*.services.%s.config.gw.save" % conf.mgs.ServerId)
    EdgeRoutingKeyList.append("*.services.%s.config.osd.load" % conf.mgs.ServerId)
    EdgeRoutingKeyList.append("*.services.%s.config.osd.save" % conf.mgs.ServerId)
    EdgeRoutingKeyList.append("*.services.%s.control" % conf.mgs.ServerId)

def MqHandler(conf, logger=None):
    ServiceList = dict()
    LocalIpList = list()
    ServiceList['IdList'] = list()
    ServiceList['Details'] = dict()
    LoadServiceList(conf, ServiceList, LocalIpList)

    AddNewRoutingKeyWithServerId(conf)

    mq = Mq(conf.mgs.MgsIp, conf.mgs.MqPort, '/', 'guest', 'guest',
            EdgeRoutingKeyList, ExchangeName,
            'IfsEdge-%s' % conf.mgs.ServerId, ServerId=conf.mgs.ServerId, ServiceList=ServiceList, logger=logger)
    mq.Receiver()


def Start(conf, logger=None, Foreground=False):
    ret, conf = GetConf(MonServicedConfPath)
    if ret is False:
        print('Init conf first')
        sys.exit(-1)
    else:
        if conf.mgs.ServerId == '':
            print('Local server is not registered. Excute ksanEdge register first')
            sys.exit(-1)

    if Foreground is False:
        D = Daemon(KsanEdgePidFile, 'ksanEdge')
        D.start()
    th = threading.Thread(target=RegisterManagementNetwork, args=(conf,))
    th.start()

    MqHandler(conf, logger=logger)

def Stop():
    D = Daemon(KsanEdgePidFile, 'ksanEdge')
    D.stop()


@catch_exceptions()
def RegisterManagementNetwork(conf):
    logger = Logging(loglevel='debug')
    logger = logger.create()
    time.sleep(10)
    netif = GetNetwork(logger=logger)
    nicinfo = netif.GetNicInfoWithNicName(conf.mgs.ManagementNetDev)
    netif = RequestNetworkInterfaceItems(conf.mgs.ManagementNetDev, Description='Management Network', logger=logger)
    netif.Set(nicinfo)
    Res, Errmsg, Ret = AddNetworkInterface(conf.mgs.MgsIp, int(conf.mgs.IfsPortalPort), conf.mgs.ServerId,
                                           netif, logger=logger)
    if Res != ResOk:
        print('fail to add Network Interface' + Errmsg)
    else:
        if Ret.Result != ResultSuccess:
            print('fail to add Network Interface' + Ret.Message)
        else:
            print(Ret.Result, Ret.Message)
            NetworkId = Ret.Data.Id
            UpdateConf(MonServicedConfPath, 'mgs', 'DefaultNetworkId', NetworkId)


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanEdge {init|start|stop|satatus} [option]
                init                                                                   : Init configuration
                start                                                                  : Start ksanEdge
                stop                                                                   : Stop ksanEdge 
                status                                                                 : Status ksanEdge
                register                                                               : Register Server to Server Pool
                unregister -S <Server Id>                                              : Unregister Server to Server Pool
        [options]
                -S                                                                     : Server Id
                -h, --help                                                             : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {init|start|stop|status|register|unregister} [option]"
    parser = MyOptionParser(usage=usage)
    #parser.add_option('-S', "--Server", action='store_true',
    #                  dest='Server', default=False, help='Server Option')
    parser.add_option('-S', "--ServerId", dest="id", help='server id')
    parser.add_option('-D', "--Description", dest="desc", default='', help='server description')
    parser.add_option('-N', "--Name", dest="NicName", default=None, help='Network Interface Name')
    parser.add_option('-T', "--Detail", dest="Detail", default=None, help='server info in detail')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='Debug mode')
    parser.add_option('-f', "--Foreground", dest="Foreground", action='store_true', default=False, help='Running as Foreground')

    options, args = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    ret, conf = GetConf(MonServicedConfPath)
    if ret is False and args[0] != 'init':
        print('Check if configuration is done')
        sys.exit(-1)

    if args[0] == 'init':
        InitMonServicedConf()
    elif args[0] == 'register':
        res, hostname, ip = GetHostInfo()
        if res is not True:
            print('fail to get HostName and Ip, %s' % hostname)
            sys.exit()
        Res, Errmsg, Ret, ServerInfo = RegisterServer(conf.mgs.MgsIp, int(conf.mgs.IfsPortalPort), options.desc,
                                                      Name=hostname, logger=logger)
        if Res != ResOk:
            print('fail to add Server' + Errmsg)
        else:
            if Ret.Result == ResultSuccess or Ret.Code == CodeServerDuplicated:
                UpdateConf(MonServicedConfPath, 'mgs', 'ServerId', ServerInfo.Id)
                print('Done')
            else:
                print('fail to add Server' + Ret.Message)

    elif args[0] == 'unregister':
        if options.id is None:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = RemoveServer(conf['mgs']['MgsIp'], int(conf['mgs']['IfsPortalPort']), options.id, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'start':
        Ret, Pid = IsDaemonRunning(KsanEdgePidFile, 'ksanEdge')
        if Ret is True:
            print('ksanEdge is already running')
        else:
            Start(conf, logger=logger, Foreground=options.Foreground)
            print('Done')

    elif args[0] == 'stop':
        Ret, Pid = IsDaemonRunning(KsanEdgePidFile, 'ksanEdge')
        if Ret is False:
            print('ksanEdge is not running')
        else:
            Stop()
            print('Done')


    elif args[0] == 'status':
        print('KsanEdge ... ',end=' ')
        Ret, Pid = IsDaemonRunning(KsanEdgePidFile, 'ksanEdge')
        if Ret is True:
            print('Ok')
        else:
            print('Not Ok')
    else:
        parser.print_help()
