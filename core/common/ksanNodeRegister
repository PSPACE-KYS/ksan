#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""


import os, sys
import pdb

import common.network
from common.init import read_conf


sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from common.utils import IsDaemonRunning
from common.init import GetConf, InitMonServicedConf, UpdateConf, GetHostInfo
from common.shcommand import shcall
from service.service_manage import *
from mqmanage.mq import *
import time
from optparse import OptionParser
import threading


def DependencyCheck():
    isValid = True
    try:
        import dns.resolver
    except Exception as err:
        print('dependency dns.resolver is not installed')
        isValid = False

    try:
        import jsonpickle
    except Exception as err:
        print('dependency jsonpickle is not installed')
        isValid = False


    try:
        import netifaces
    except Exception as err:
        print('dependency netifaces is not installed')
        isValid = False


    try:
        import pika
    except Exception as err:
        print('dependency pika is not installed')
        isValid = False


    try:
        import psutil
    except Exception as err:
        print('dependency psutil is not installed')
        isValid = False


    try:
        import requests
    except Exception as err:
        print('dependency requests is not installed')
        isValid = False

    return isValid


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanEdge [option]
        [options]
                -i                                                                     : Local Management Ip
                -m                                                                     : Portal Ip 
                -p                                                                     : Portal Port 
                -q                                                                     : Mq Port 
                -h, --help                                                             : show this help message and exit
"""
        print(Usage)

def UpdateMonConfig(PortalIp, PortalPort, LocalIp, MqUser, MqPort, MqPassword, ApiKey):
    if os.path.exists(MonServicedConfPath):
        ret, conf = read_conf(MonServicedConfPath)
        if ret is True:
            if 'ServerId' in conf['mgs']:
                if conf['mgs']['ServerId'] != '':
                    return False, 'Already registered'

    net = common.network.GetNetwork()
    nic = net.GetNicInfo(Ip=LocalIp)
    if not nic:
        return False, 'fail to get network device with local ip %s' % LocalIp

    NetDevice = nic['Name']
    Conf = """
[mgs]
MgsIp = %s 
IfsPortalPort = %s
MqUser = %s 
MqPassword = %s
MqPort = %s
IfsPortalKey = %s 
ServerId = 
ManagementNetDev = %s
DefaultNetworkId = 
""" % (PortalIp, PortalPort, MqUser, MqPassword, MqPort, ApiKey, NetDevice)

    if not os.path.exists(KsanEtcPath):
        os.makedirs(KsanEtcPath)

    with open(MonServicedConfPath, 'w') as f:
        f.write(Conf)
    return True, ''

def RegisterNode():
    Cmd = '/usr/local/ksan/bin/ksanEdge register'
    out, err = shcall(Cmd)
    if 'Done' in out or 'Already registered' in out:
        return True, ''
    else:
        return False, err


def StartksanEdge():
    Cmd = '/usr/local/ksan/bin/ksanEdge stop;/usr/local/ksan/bin/ksanEdge start -i %s' % LocalIp
    out, err = shcall(Cmd)
    if 'Done' in out or 'Already running':
        return True, ''
    else:
        return False, err

def StartksanMon():
    Cmd = 'kill -9 $(ps -ef |grep ksanMon|grep -v grep|awk \'{print $2}\') >/dev/null 2>&1;sleep 1;/usr/local/ksan/bin/ksanMon start'
    out, err = shcall(Cmd)
    if 'Done' in out or 'Already running':
        return True, ''
    else:
        return False, err



if __name__ == '__main__':
    usage = "Usage: %prog [option]"
    parser = MyOptionParser(usage=usage)
    #parser.add_option('-S', "--Server", action='store_true',
    #                  dest='Server', default=False, help='Server Option')
    parser.add_option('-i', "--local-ip", dest="localip", help='local ip')
    parser.add_option('-m', "--portal-ip", dest="portalip", help='portal ip')
    parser.add_option('-p', "--portal-port", dest="portalport", help='portal port')
    parser.add_option('-q', "--mq-port", dest="mqport", help='mq port')
    parser.add_option('-u', "--mq-user", dest="mquser", help='mq user')
    parser.add_option('-w', "--mq-password", dest="mqpassword", help='mq password')
    parser.add_option('-k', "--apikey", dest="apikey", help='portal api key')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='Debug mode')

    options, args = parser.parse_args()
    PortalIp = options.portalip
    PortalPort = options.portalport
    LocalIp = options.localip
    MqPort = options.mqport
    MqUser = options.mquser
    MqPassword = options.mqpassword
    ApiKey = options.apikey



    #logger = None
    #if options.debug is True:
    logger = Logging(loglevel='debug')
    logger = logger.create()

    if not(LocalIp and PortalIp and PortalPort and MqPort and MqUser and MqPassword and ApiKey):
        logger.error('Option is ommitted')
        parser.print_help()
        sys.exit(-1)

    ret = DependencyCheck()
    if ret is False:
        logger.error('dependency fail')
        sys.exit(-1)

    ret, err = UpdateMonConfig(PortalIp, PortalPort, LocalIp, MqUser, MqPort, MqPassword, ApiKey)
    if ret is False:
        print(err)
        logger.error('fail to update ksanMon.conf %s ' % str(err))
        sys.exit(-1)

    if ret is True or 'Already registered' not in err:
        ret, err = RegisterNode()
        if ret is False:
            print(err)
            logger.error('fail to register ksan server %s ' % str(err))
            sys.exit(-1)

    ret, err = StartksanEdge()
    if ret is False:
        print(err)
        logger.error('fail to start ksanEdge service %s ' % str(err))
        sys.exit(-1)

    ret, err = StartksanMon()
    if ret is False:
        print(err)
        logger.error('fail to start ksanMon service %s ' % str(err))
        sys.exit(-1)
    print('Done')
    logger.info('success to register ksan node')
