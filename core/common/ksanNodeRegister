#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""


import os, sys
import pdb

import common.network
from common.init import read_conf


sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from service.service_manage import *
from mqmanage.mq import *
from optparse import OptionParser


def DependencyCheck():
    isValid = True
    try:
        import dns.resolver
    except Exception as err:
        print('dependency dns.resolver is not installed')
        isValid = False

    try:
        import jsonpickle
    except Exception as err:
        print('dependency jsonpickle is not installed')
        isValid = False


    try:
        import netifaces
    except Exception as err:
        print('dependency netifaces is not installed')
        isValid = False


    try:
        import pika
    except Exception as err:
        print('dependency pika is not installed')
        isValid = False


    try:
        import psutil
    except Exception as err:
        print('dependency psutil is not installed')
        isValid = False


    try:
        import requests
    except Exception as err:
        print('dependency requests is not installed')
        isValid = False

    return isValid


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanAgent [option]
        [options]
                -i                                                                     : Local Management Ip
                -m                                                                     : Portal Host  
                -p                                                                     : Portal Port 
                -r                                                                     : Mq Host 
                -u                                                                     : Mq User  
                -q                                                                     : Mq Port 
                -w                                                                     : Mq Password 
                -k                                                                     : Portal Api Key
                -h, --help                                                             : show this help message and exit
"""
        print(Usage)

def UpdateKsanAgentConfig(PortalIp, PortalPort, LocalIp, MqHost, MqUser, MqPort, MqPassword, ApiKey):
    oldconf = None
    if os.path.exists(MonServicedConfPath):
        ret, oldconf = read_conf(MonServicedConfPath)
        if ret is True:
            if 'ServerId' in oldconf['mgs']:
                if oldconf['mgs']['ServerId'] != '':
                    return False, 'already registered'

    net = common.network.GetNetwork()
    nic = net.GetNicInfo(Ip=LocalIp)
    if not nic:
        return False, 'fail to get network device with local ip %s' % LocalIp

    NetDevice = nic['Name']
    Conf = """
[mgs]
PortalHost = %s 
PortalPort = %s
MqHost = %s 
MqUser = %s 
MqPassword = %s
MqPort = %s
PortalApiKey = %s 
ServerId = 
ManagementNetDev = %s
DefaultNetworkId = 
""" % (PortalIp, PortalPort, MqHost, MqUser, MqPassword, MqPort, ApiKey, NetDevice)
    if oldconf is not None:
        if 'monitor' in oldconf:
            MonitorConf = """
[monitor]
ServerMonitorInterval = %s 
NetworkMonitorInterval = %s 
DiskMonitorInterval = %s 
ServiceMonitorInterval = %s 
""" % (oldconf['monitor']['ServerMonitorInterval'], oldconf['monitor']['NetworkMonitorInterval'],
       oldconf['monitor']['DiskMonitorInterval'], oldconf['monitor']['ServiceMonitorInterval'])
        else:
            MonitorConf = """
[monitor]
ServerMonitorInterval = 5000
NetworkMonitorInterval = 5000
DiskMonitorInterval = 5000
ServiceMonitorInterval = 5000
        """
    else:
        MonitorConf = """
[monitor]
ServerMonitorInterval = 5000
NetworkMonitorInterval = 5000
DiskMonitorInterval = 5000
ServiceMonitorInterval = 5000
                """

    Conf += MonitorConf


    if not os.path.exists(KsanEtcPath):
        os.makedirs(KsanEtcPath)

    with open(MonServicedConfPath, 'w') as f:
        f.write(Conf)
    return True, ''

def RegisterNode():
    Cmd = '%s register' % KsanAgentPath
    out, err = shcall(Cmd)
    if 'Done' in out or 'already registered' in out:
        return True, ''
    else:
        return False, err


def StartksanAgent():
    Cmd = '%s stop;%s start -i %s' % (KsanAgentPath, KsanAgentPath, LocalIp)
    out, err = shcall(Cmd)
    if 'Done' in out or 'already running':
        return True, ''
    else:
        return False, err

def StartksanMon():
    Cmd = 'kill -9 $(ps -ef |grep ksanMonitor|grep -v grep|awk \'{print $2}\') >/dev/null 2>&1;sleep 1;/usr/local/ksan/bin/ksanMonitor start'
    out, err = shcall(Cmd)
    if 'Done' in out or 'already running':
        return True, ''
    else:
        return False, err



if __name__ == '__main__':
    usage = "Usage: %prog [option]"
    parser = MyOptionParser(usage=usage)
    #parser.add_option('-S', "--Server", action='store_true',
    #                  dest='Server', default=False, help='Server Option')
    parser.add_option('-i', "--local-ip", dest="localip", help='local ip')
    parser.add_option('-m', "--portal-host", dest="portalhost", help='portal ip')
    parser.add_option('-r', "--rabbitmq-host", dest="mqhost", help='portal ip')
    parser.add_option('-p', "--portal-port", dest="portalport", help='portal port')
    parser.add_option('-q', "--mq-port", dest="mqport", help='mq port')
    parser.add_option('-u', "--mq-user", dest="mquser", help='mq user')
    parser.add_option('-w', "--mq-password", dest="mqpassword", help='mq password')
    parser.add_option('-k', "--apikey", dest="apikey", help='portal api key')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='Debug mode')

    options, args = parser.parse_args()
    PortalIp = options.portalhost
    PortalPort = options.portalport
    LocalIp = options.localip
    MqPort = options.mqport
    MqUser = options.mquser
    MqHost = options.mqhost
    MqPassword = options.mqpassword
    ApiKey = options.apikey



    #logger = None
    #if options.debug is True:
    logger = Logging(loglevel='debug')
    logger = logger.create()

    if not(LocalIp and PortalIp and PortalPort and MqPort and MqUser and MqPassword and ApiKey):
        logger.error('Option is omitted LocalIp:%s, PortalIp:%s, PortalPort:%s, MqUser:%s MqPort:%s MqPassword:%s ApiKey:%s'
                     % (LocalIp, PortalIp, PortalPort, MqUser, MqPort, MqPassword, ApiKey))
        parser.print_help()
        sys.exit(-1)
    else:
        logger.debug('ksanNodeRegister options LocalIp:%s, PortalHost:%s, PortalPort:%s, MqHost:%s, MqUser:%s MqPort:%s MqPassword:%s ApiKey:%s'
            % (LocalIp, PortalIp, PortalPort, MqHost, MqUser, MqPort, MqPassword, ApiKey))

    ret = DependencyCheck()
    if ret is False:
        logger.error('dependency fail')
        sys.exit(-1)

    ret, err = UpdateKsanAgentConfig(PortalIp, PortalPort, LocalIp, MqHost, MqUser, MqPort, MqPassword, ApiKey)
    if ret is False:
        print(err)
        logger.error('fail to update ksanMonitor.conf %s ' % str(err))
        sys.exit(-1)

    if ret is True or 'already registered' not in err:
        ret, err = RegisterNode()
        if ret is False:
            print(err)
            logger.error('fail to register ksan server %s ' % str(err))

    ret, err = StartksanAgent()
    if ret is False:
        print(err)
        logger.error('fail to start ksanAgent service %s ' % str(err))
        sys.exit(-1)

    print('Done')
    logger.info('success to register ksan node')
