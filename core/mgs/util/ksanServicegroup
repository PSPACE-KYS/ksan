#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""

import sys, os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from service.service_manage import *
from server.server_manage import *
from common.init import GetConf


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ifs_serviceGroup {add|remove|update|start|stop|addService|removeService|list} [option]
                add        -n <Group Name> -t <Group Type [GW|OSD]>                          : Add Group
                remove     -G <Group Id>                                                     : Delete Group
                update     -G <Group Id>                                                     : Update Group Info
                start      -G <Group Id>                                                     : Start Group
                stop       -G <Group Id>                                                     : Stop Group 
                addService -G <Group Id> -I <Service Ids>                                    : Add Service to Group
                removeService -G <Group Id> -I <Service Ids>                                 : Remove Service to Group
                list      -l                                                                 : Show Group info
        [options]
                -I                                                                           : Service Id
                -n                                                                           : Service Name
                -G                                                                           : Service Group Id
                -t                                                                           : Service Type
                -l                                                                           : Show Service Info in detail
                -h, --help                                                                   : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {add|remove|update|start|stop|addService|removeService|list} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-S', "--ServerId", dest="ServerId", help='Server Id')
    parser.add_option('-I', "--ServiceId", dest="ServiceId", help='Service Id')
    parser.add_option('-n', "--Name", dest="Name", help='server description')
    parser.add_option('-G', "--GroupId", dest="GroupId", help='Group Id')
    parser.add_option('-D', "--ServiceIds", dest="ServiceIds", default=[],help='Service Ids')
    parser.add_option('-t', "--ServiceType", dest="ServiceType", help='Service Type')
    parser.add_option('-c', "--Description", dest="Description", help='Description')
    parser.add_option('-l', "--Detail", dest="Detail", action='store_true', help='server info in detail')
    parser.add_option('-i', "--Ipaddr", dest="IpAddress", help='Service Group IpAddress')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='debug mode')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    ret, conf = GetConf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf.mgs.MgsIp
        IfsPortalPort = int(conf.mgs.IfsPortalPort)
        IfsMqPort = int(conf.mgs.MqPort)

    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    if args[0] == 'add':
        if options.ServiceType not in ['OSD', 'GW']:
            parser.print_help()
            sys.exit(-1)

        Res, Errmsg, Ret = AddServiceGroup(IfsPortalIp, IfsPortalPort, options.Name, options.ServiceType,
                                           Description=options.Description, ServiceIpAddress=options.IpAddress,
                                           ServiceIds=options.ServiceIds, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'remove':
        Res, Errmsg, Ret = RemoveServiceGroup(IfsPortalIp, IfsPortalPort, options.GroupId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] in ['addService', 'removeService', 'update']:
        AddServiceIds = None
        removeServiceIds = None
        if args[0] == 'addService':
            if not (options.ServiceId and options.GroupId):
                parser.print_help()
                sys.exit(-1)
            AddServiceIds = options.ServiceId.split()
        elif args[0] == 'removeService':
            if not (options.ServiceId and options.GroupId):
                parser.print_help()
                sys.exit(-1)
            removeServiceIds = options.ServiceId.split()
        Res, Errmsg, Ret = UpdateServiceGroup(IfsPortalIp, IfsPortalPort, options.GroupId, Name=options.Name,
                                              Description=options.Description,
                                             addServiceIds=AddServiceIds,removeServiceIds=removeServiceIds, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'config':
        Res, Errmsg, Ret = UpdateServiceConf(IfsPortalIp, IfsPortalPort, options.ServiceId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] in ['start', 'stop', 'restart']:
        if not options.GroupId:
            parser.print_help()
            sys.exit(-1)
        Action = 'Start'
        if args[0] == 'stop':
            Action = 'Stop'
        elif args[0] == 'restart':
            Action = 'Restart'

        Res, Errmsg, Ret = ControlSerivceGroup(IfsPortalIp, IfsPortalPort, options.GroupId, Action, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)


    elif args[0] == 'list':
        Res, Errmsg, Ret, Data = GetAllServiceGroups(IfsPortalIp, IfsPortalPort, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
            ShowServiceGroup(Data, Detail=options.Detail)
        else:
            print(Errmsg)
    else:
        parser.print_help()
