#!/bin/env python3
"""
* Copyright 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version
* 3 of the License.  See LICENSE.md for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from common.init import read_conf
from network.network_manage import *
from server.server_manage import *


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanNetwork {add|remove|update|show|status|exists_check} [option]
                init                                         : init management server ip and port
                add       -n <nic name>  -S <server id>      : register nic to the management network interface pool
                addvlan   -V <vlan id>  -i <Ipaddress> -m <Subnetmask> -g <gateway>      : register vlan network to the vlan network interface pool
                remove    -S <server id>                     : unregister local server from management servers pool
                remove_vlan   -S <server id> -N <nic id> -V <Vlan Id>                     : unregister vlan network from vlan network pool
                update    -n <nicname> -N <nic id> -S <server id>  : update specific nic info 
                update_status   -N <nic id> -S <server id>  : update specific network interface status 
                list      -S <server id>                     : show the registered network interface info with server id
                check     -S <server id> -n <nic name> -N <nic id> : check if a regisetered network interface exists with nic name. exclude with nic id
                check_vlan     -S <server id> -n <nic name> -N <nic id> -V <Vlan Id>: check if a regisetered vlan network interface exists with nic name. exclude with nic id
        [options]
                -S                                           : Server Id 
                -n                                           : Network Device Name
                -N                                           : Network Device Id 
                -V                                           : Vlan Id
                -i                                           : Ip Address  
                -m                                           : Nework SubnetMask
                -g                                           : Gateway Ip 
                -h, --help                                   : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {init|add|remove|update|show|status} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-i', "--Ip", dest="IpAddress", help='IpAddress')
    parser.add_option('-m', "--SubnetMask", dest="SubnetMask", help='SubnetMask')
    parser.add_option('-g', "--Gateway", dest="Gateway", help='Gateway')
    parser.add_option('-V', "--VlanInterfceid", dest="Tag", help='Vlan Network id')
    parser.add_option('-I', "--InterfaceId", dest="InterfaceId", help='Network Interface Id')
    parser.add_option('-S', "--Serverid", dest="ServerId", help='Server Id')
    parser.add_option('-v', "--Vlanid", dest="VlanId", help='Vlan Id')
    parser.add_option('-c', "--Description", dest="Description", default='', help='server description')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='debug mode')
    parser.add_option('-n', "--Name", dest="Name", help='Network Interface Name')
    parser.add_option('-l', "--Detail", dest="Detail", action='store_true', help='Network Info in Detail')

    options, args = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    ret, conf = read_conf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf['mgs']['MgsIp']
        IfsPortalPort = int(conf['mgs']['IfsPortalPort'])
        IfsMqPort = int(conf['mgs']['MqPort'])



    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()
    if args[0] == 'add':
        if not (options.ServerId and options.Name):
            parser.print_help()
        else:
            Res, Errmsg, Ret = AddNetworkInterface(IfsPortalIp, IfsPortalPort, options.ServerId, options.Name, Description=options.desc, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'addvlan':
        if not (options.ServerId and options.NicId and options.Tag and options.IpAddress and options.SubnetMask and options.Gateway):
            parser.print_help()
        else:
            Tag = options.Tag
            IpAddress = options.IpAddress
            SubnetMask = options.SubnetMask
            Gateway = options.Gateway
            Res, Errmsg, Ret = add_vlan_network_interface(IfsPortalIp, IfsPortalPort, options.ServerId, options.NicId, Tag, IpAddress, SubnetMask, Gateway, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'update':
        if not options.InterfaceId:
            parser.print_help()
        else:
            Res, Errmsg, Ret = UpdateNetworkInterfaceInfo(IfsPortalIp, IfsPortalPort, options.InterfaceId,
                                                Name=options.Name, Description=options.Description, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'update_vlan':
        if not (options.ServerId and options.NicId and options.VlanId and options.Tag and options.IpAddress and options.SubnetMask and options.Gateway):
            parser.print_help()
        else:
            Res, Errmsg, Ret = update_vlan_network_interface_info(IfsPortalIp, IfsPortalPort, options.ServerId, options.NicId, options.VlanId, options.Tag, options.IpAddress, options.SubnetMask, options.Gateway, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)

    elif args[0] == 'update_status':
        if not (options.ServerId and options.NicId):
            parser.print_help()
        else:
            Res, Errmsg, Ret = UpdateNetworkInterfaceLinkState(IfsPortalIp, IfsPortalPort, options.ServerId, options.NicId, "Down", logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'remove':
        if not (options.InterfaceId):
            parser.print_help()
        else:
            Res, Errmsg, Ret = DeleteNetworkInterface(IfsPortalIp, IfsPortalPort, options.InterfaceId, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'remove_vlan':
        if not (options.ServerId and options.NicId):
            parser.print_help()
        else:
            Res, Errmsg, Ret = delete_vlan_network_interface(IfsPortalIp, IfsPortalPort, options.ServerId, options.NicId, options.VlanId, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'list':
        #Res, Errmsg, Ret, Data = GetNetworkInterface(IfsPortalIp, IfsPortalPort, ServerId=options.ServerId, NicId=options.NicId, disp=True,
        #                       logger=logger)
        Res, Errmsg, Ret, Data = GetAllServerDetailInfo(IfsPortalIp, IfsPortalPort, logger=logger)
        if Res == ResOk:
            if Ret.Result == ResultSuccess:
                ShowNetworkInterfaceInfo(Data, InterfaceId=options.InterfaceId, Detail=options.Detail)
            else:
                print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'show_vlan':
        if not (options.ServerId and options.NicId):
            parser.print_help()
        else:
            Res, Errmsg, Ret = GetVlanNetworkInterfaces(IfsPortalIp, IfsPortalPort, options.ServerId, options.NicId, VlanId=options.VlanId, disp=True,
                                   logger=logger)
            if Res != ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)
    elif args[0] == 'check':
        if not (options.ServerId and options.Name):
            parser.print_help()
        else:
            Res, Errmsg, Ret = check_exist_network_interface(IfsPortalIp, IfsPortalPort, options.ServerId, options.Name, options.NicId, logger=logger)
            if Res == ResOk:
                print(Ret)
            else:
                print(Errmsg)
    elif args[0] == 'check_vlan':
        if not (options.ServerId and options.NicId and options.Tag):
            parser.print_help()
        else:
            Res, Errmsg, Ret = check_exist_vlan_network_interface(IfsPortalIp, IfsPortalPort, options.ServerId, options.NicId, options.Tag, VlanId=options.VlanId, logger=logger)
            if Res == ResOk:
                print(Ret)
            else:
                print(Errmsg)
    else:
        parser.print_help()

