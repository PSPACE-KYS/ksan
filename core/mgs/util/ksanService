#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""

import sys, os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from service.service_manage import *
from server.server_manage import *
from common.init import GetConf
from common.define import TypeServiceMongoDB, TypeServiceS3, TypeServiceOSD, TypeServiceHaproxy, \
    TypeServiceMonitor, TypeServiceAgent


class MyOptionParser(OptionParser):
    def print_help(self):
        """ add       -S <Server Id>  -n <Service Name> -G <Group Id>
                    -T <Service Type [GW|OSD]>                     : Add  Service
        """

        Usage = """
        Usage: ksanService {add|remove|config|start|stop|update|list} [option]
                add    -n <server id> -N <service name> -t <service type>               : Add Service
                remove    -N <service name>                                             : Delete Service
                config {list|get|add|update_version|remove}  -t <service type> 
                -v <version>                                                            : Config Service Conf
                start     -N <service name>                                             : Start Service 
                stop      -N <service name>                                             : Stop Service 
                list                                                                    : Display Service info
        [options]
                -S                                                                      : Server Id
                -I                                                                      : Service Id
                -N                                                                      : Service Name
                -G                                                                      : Service Group Id
                -t                                                                      : Service Type. <osd, gw, monitor, agent, mongodb>
                -l                                                                      : Show Service Info in detail
                -h, --help                                                              : show this help message and exit
"""
        print(Usage)


def ConfigControl(PortalIp, PortalPort, ApiKey, args, options, logger):
    if len(args) != 2:
        parser.print_help()
        sys.exit(-1)
    if not options.ServiceType:
        print('Service type(-t) is required')
        sys.exit(-1)
    if options.ServiceType not in [TypeServiceMongoDB, TypeServiceOSD, TypeServiceMonitor, TypeServiceS3,
                                       TypeServiceMonitor, TypeServiceAgent]:
        print('Invalid Service Type. Valid Service Type: %s' % ', '.join([TypeServiceMongoDB, TypeServiceOSD,
                                                TypeServiceMonitor, TypeServiceS3, TypeServiceMonitor, TypeServiceAgent]))
        sys.exit(-1)
    if args[1] == 'add':
        ServiceType = options.ServiceType
        if options.File:
            ConfigFile = options.File
        else:
           ConfigFile = None
        Res, Errmsg, Ret = SetServiceConfig(IfsPortalIp, IfsPortalPort, ApiKey, ServiceType, ConfigFilePath=ConfigFile, logger=logger)
        if Res != ResOk:
            print(Errmsg)
        else:
            print(Ret.Message)

    elif args[1] == 'get':
        Version = options.version
        File = options.File
        ServiceType = options.ServiceType
        Res, Errmsg, Ret, Data = GetServiceConfig(IfsPortalIp, IfsPortalPort, ApiKey, ServiceType, Version=Version, logger=logger)
        if Res != ResOk:
            print(Errmsg)
        else:
            if(Ret.Result == ResultSuccess):
                DsPServiceConf(Data)
            else:
                print(Ret.Message)

    elif args[1] == 'update_version':
        if not options.version:
            parser.print_help()
            print('config version is required.')
            sys.exit(-1)
        Version = options.version
        ServiceType = options.ServiceType
        Res, Errmsg, Ret = UpdateServiceConfigVersion(IfsPortalIp, IfsPortalPort, ApiKey, ServiceType, Version, logger=logger)
        print(Ret.Result, Ret.Message)

    elif args[1] == 'remove':
        Version = options.version
        ServiceType = options.ServiceType
        Res, Errmsg, Ret = RemoveServiceConfig(IfsPortalIp, IfsPortalPort, ApiKey, ServiceType, Version, logger=None)
        print(Ret.Result, Ret.Message)

    elif args[1] == 'list':
        Version = options.version
        ServiceType = options.ServiceType
        Res, Errmsg, Ret, Data = GetServiceConfigList(PortalIp, PortalPort, ApiKey, ServiceType, logger=logger)
        if Res != ResOk:
            print(Errmsg)
        else:
            print(Ret.Result, Ret.Message)
            ShowConfigList(Data)
    else:
        parser.print_help()
        sys.exit(-1)


if __name__ == '__main__':
    usage = "Usage: %prog {add|remove|config|start|stop|update|list} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-S', "--ServerId", dest="ServerId", help='Server Id')
    parser.add_option('-I', "--ServiceId", dest="ServiceId", help='Service Id')
    parser.add_option('-N', "--ServiceName", dest="ServiceName", help='Service Name')
    parser.add_option('-n', "--ServerName", dest="ServerName", help='Server Name')
    parser.add_option('-G', "--GroupId", dest="GroupId", help='Group Id')
    parser.add_option('-t', "--ServiceType", dest="ServiceType", help='Service Type')
    parser.add_option('-F', "--File", dest="File", help='Config File Path')
    #parser.add_option('-V', "--VlanIds", dest="VlanIds", help='Vlan Id')
    parser.add_option('-v', "--version", dest="version", help='version')
    parser.add_option('-c', "--Description", dest="Description", help='Description')
    #parser.add_option('-s', "--State", dest="State", help='State')
    parser.add_option('-l', "--Detail", dest="Detail", action='store_true', help='server info in detail')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='debug mode')

    options, args = parser.parse_args()

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    IfsPortalKey = ''
    ret, conf = GetConf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf.mgs.MgsIp
        IfsPortalPort = int(conf.mgs.IfsPortalPort)
        IfsMqPort = int(conf.mgs.MqPort)
        IfsPortalKey = conf.mgs.IfsPortalKey

    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
    else:
        logger = Logging(loglevel='error')
    logger = logger.create()

    if len(args) < 1:
        parser.print_help()
        sys.exit(-1)

    if args[0] == 'add':
        if not ((options.ServerName or options.ServerId) and options.ServiceName and options.ServiceType):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = AddService(IfsPortalIp, IfsPortalPort, IfsPortalKey, options.ServiceName, options.ServiceType, ServerId=options.ServerId,
                                      ServerName=options.ServerName, GroupId=options.GroupId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'remove':
        if not (options.ServiceId or options.ServiceName):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = DeleteService(IfsPortalIp, IfsPortalPort, IfsPortalKey, ServiceId=options.ServiceId,
                                         ServiceName=options.ServiceName, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update':
        if not (options.ServiceId or options.ServiceName):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = UpdateServiceInfo(IfsPortalIp, IfsPortalPort, IfsPortalKey, ServiceId=options.ServiceId, ServiceName=options.ServiceName,
                                             ServiceType=options.ServiceType,
                                             GroupId=options.GroupId, Description=options.Description,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_state':
        Res, Errmsg, Ret = UpdateServiceState(IfsPortalIp, IfsPortalPort, IfsPortalKey, options.ServiceId,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_usage':
        Res, Errmsg, Ret = UpdateServiceUsage(IfsPortalIp, IfsPortalPort, IfsPortalKey, options.ServiceId,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'config':
        ConfigControl(IfsPortalIp, IfsPortalPort, IfsPortalKey, args, options, logger)

        """
        Res, Errmsg, Ret = UpdateServiceConf(IfsPortalIp, IfsPortalPort, options.ServiceId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
        """
    elif args[0] in ['start', 'stop']:
        if not (options.ServiceId or options.ServiceName):
            parser.print_help()
            sys.exit(-1)

        Res, Errmsg, Ret = ControlService(IfsPortalIp, IfsPortalPort, IfsPortalKey, args[0], ServiceId=options.ServiceId,
                                          ServiceName=options.ServiceName, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'list':
        if options.Detail:
            Res, Errmsg, Ret, Data = GetAllServerDetailInfo(IfsPortalIp, IfsPortalPort, IfsPortalKey,logger=logger)
        else:
            Res, Errmsg, Ret, Data = GetServiceInfo(IfsPortalIp, IfsPortalPort, IfsPortalKey, logger=logger)

        if Res == ResOk:
            print(Ret.Result, Ret.Message)
            if options.Detail:
                ShowServiceInfoWithServerInfo(Data, Detail=options.Detail)
                #ShowServiceInfo(Data, Detail=options.Detail)
            else:
                ShowServiceInfo(Data, Detail=options.Detail)
        else:
            print(Errmsg)
    else:
        parser.print_help()
