#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""

import sys, os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from ksan.service.service_manage import *
from ksan.server.server_manage import *
from ksan.common.init import GetConf


class MyOptionParser(OptionParser):
    def print_help(self):
        """ add       -S <Server Id>  -n <Service Name> -G <Group Id>
                    -T <Service Type [GW|OSD]>                     : Add  Service
        """

        Usage = """
        Usage: ksanService {add|delete|start|stop|set|list} [option]
                remove    -I <Service Id>                                               : Delete Service
                config    -I <Service Id>                                               : Config Service Conf
                start     -I <Service Id>                                               : Start Service 
                stop      -I <Service Id>                                               : Stop Service 
                restart   -I <Service Id>                                               : Restart Service 
                list                                                                    : Display Service info
        [options]
                -S                                                                      : Server Id
                -I                                                                      : Service Id
                -n                                                                      : Service Name
                -G                                                                      : Service Group Id
                -T                                                                      : Service Type
                -L                                                                      : Show Service Info in detail
                -V                                                                      : Vlan Id
                -F                                                                      : Config File Path
                -h, --help                                                              : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {init|add|delete|update|list|status} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-S', "--ServerId", dest="ServerId", help='Server Id')
    parser.add_option('-I', "--ServiceId", dest="ServiceId", help='Service Id')
    parser.add_option('-n', "--Name", dest="Name", help='server description')
    parser.add_option('-G', "--GroupId", dest="GroupId", help='Group Id')
    parser.add_option('-T', "--ServiceType", dest="ServiceType", help='Service Type')
    parser.add_option('-F', "--File", dest="File", help='Config File Path')
    parser.add_option('-V', "--VlanIds", dest="VlanIds", help='Vlan Id')
    parser.add_option('-e', "--Description", dest="Description", help='Description')
    parser.add_option('-s', "--State", dest="State", help='State')
    parser.add_option('-L', "--Detail", dest="Detail", action='store_true', help='server info in detail')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='debug mode')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    ret, conf = GetConf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf.mgs.MgsIp
        IfsPortalPort = int(conf.mgs.IfsPortalPort)
        IfsMqPort = int(conf.mgs.MqPort)

    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    if args[0] == 'add':
        if not (options.ServerId and options.Name and options.ServiceType):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = AddService(IfsPortalIp, IfsPortalPort, options.Name, options.ServiceType, options.ServerId,
                                      options.GroupId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'remove':
        if not options.ServiceId:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = DeleteService(IfsPortalIp, IfsPortalPort, options.ServiceId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update':
        if not options.ServiceId:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = UpdateServiceInfo(IfsPortalIp, IfsPortalPort, options.ServiceId, Name=options.Name,
                                             ServiceType=options.ServiceType,
                                             GroupId=options.GroupId, Description=options.Description, State=options.State,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_state':
        Res, Errmsg, Ret = UpdateServiceState(IfsPortalIp, IfsPortalPort, options.ServiceId, State=options.State,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_usage':
        Res, Errmsg, Ret = UpdateServiceUsage(IfsPortalIp, IfsPortalPort, options.ServiceId,
                                              logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'config':
        Res, Errmsg, Ret = UpdateServiceConf(IfsPortalIp, IfsPortalPort, options.ServiceId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] in ['start', 'stop']:
        if not options.ServiceId:
            parser.print_help()
            sys.exit(-1)

        Res, Errmsg, Ret = ControlService(IfsPortalIp, IfsPortalPort, options.ServiceId, args[0], logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'list':
        if options.Detail:
            Res, Errmsg, Ret, Data = GetAllServerDetailInfo(IfsPortalIp, IfsPortalPort,logger=logger)
        else:
            Res, Errmsg, Ret, Data = GetServiceInfo(IfsPortalIp, IfsPortalPort,logger=logger)

        if Res == ResOk:
            print(Ret.Result, Ret.Message)
            if options.Detail:
                ShowServiceInfoWithServerInfo(Data, Detail=options.Detail)
                #ShowServiceInfo(Data, Detail=options.Detail)
            else:
                ShowServiceInfo(Data, Detail=options.Detail)
        else:
            print(Errmsg)
    else:
        parser.print_help()
