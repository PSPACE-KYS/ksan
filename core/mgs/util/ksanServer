#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""

import os, sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from common.init import read_conf
from server.server_manage import *
import pdb


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanServer {add|remove|update|list} [option]
                add       -i <server ip>                                     : Add Server to servers pool
                remove    -N <server name>                                   : Remove server from servers pool
                update    -N <server name> -c <Description>                  : Update server info 
                list      -l                                                 : Show the registered server info
        [options]
                -S                                                           : Server Id    
                -N                                                           : Server Name
                -e                                                           : Description
                -l                                                           : Show info in detail
                -h, --help                                                   : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {add|remove|update|list} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-S', "--Id", dest="ServerId", help='Server Id')
    parser.add_option('-i', "--IpAddress", dest="IpAddress", default='', help='Server Ip Address')
    parser.add_option('-c', "--Description", dest="Description", default='', help='Server Description')
    parser.add_option('-N', "--Name", dest="Name", default=None, help='Server Name')
    parser.add_option('-l', "--Detail", dest="Detail", action='store_true', help='Server Info in detail')
    parser.add_option('-s', "--State", dest="State", help='Server State')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='debug mode')
    #parser.add_option('-A', "--LoadAverage", dest="LoadAverage", default=False, help='LoadAverage')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = ''
    IfsPortalPort = 0
    IfsMqPort = 0
    ApiKey = ''
    ret, conf = read_conf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf['mgs']['MgsIp']
        IfsPortalPort = int(conf['mgs']['IfsPortalPort'])
        IfsMqPort = int(conf['mgs']['MqPort'])
        ApiKey = conf['mgs']['IfsPortalKey']
    else:
        if args[0] != 'init':
            print("ksanMonitor.conf is not configured. ./ksanServer init first")
            sys.exit(-1)

    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    if args[0] == 'add':
        Res, Errmsg, Ret = ServerInit(IfsPortalIp, IfsPortalPort, options.IpAddress, IfsMqPort, ApiKey, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'remove':
        if not (options.ServerId or options.Name):
            parser.print_help()
            sys.exit(-1)

        Res, Errmsg, Ret = RemoveServer(IfsPortalIp, IfsPortalPort, ApiKey, ServerId=options.ServerId, Name=options.Name, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update':
        if not (options.ServerId or options.Name):
            parser.print_help()
            sys.exit(-1)

        Res, Errmsg, Ret = UpdateServerInfo(IfsPortalIp, IfsPortalPort, ApiKey, ServerId=options.ServerId, Name=options.Name,
                                            Description=options.Description, State=options.State, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'update_state':
        if options.ServerId is None:
            parser.print_help()
            sys.exit(-1)

        Res, Errmsg, Ret = UpdateServerInfo(IfsPortalIp, IfsPortalPort, ApiKey, ServerId=options.ServerId, Name=options.Name, State=options.State, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'list':
        Detail = False
        if options.Detail:
            Detail = True
        Res, errmsg, Ret, Data = GetAllServerDetailInfo(IfsPortalIp, IfsPortalPort, ApiKey, logger=logger)
        if Res == ResOk:
            if Ret.Result == ResultSuccess:
                ShowServerInfo(Data, Id=options.ServerId, Detail=options.Detail)
            else:
                print(Ret.Result, Ret.Message)
        else:
            print(errmsg)
    elif args[0] == 'check':
        if options.name is None:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = server_exist_check_with_servername(IfsPortalIp, IfsPortalPort, options.Name, ApiKey,
                                                              ExcludeServerId=options.ServerId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message, Ret.Data)
        else:
            print(Errmsg)
    else:
        parser.print_help()
