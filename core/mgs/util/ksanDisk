#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""


import os, sys
import pdb

if os.path.dirname(os.path.abspath(os.path.dirname(__file__))) not in sys.path:
    sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from ksan.mqmanage.mq import *
from ksan.disk.disk_manage import *
from optparse import OptionParser
from ksan.common.init import read_conf


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanDisk {add|delete|start|stop|set|list} [option]
                add       -S <server id> -p <disk path>                                : Add disk
                remove    -I <disk id>                                                 : Remove disk
                set       -I <disk id> [Rw|Ro]                                         : Set disk mode. Ro:ReadOnly, Rw: ReadWrite
                start     -I <disk id>                                                 : Start disk 
                stop      -I <disk id>                                                 : Stop disk 
                update    -I <disk id>  -O <Disk Pool Id> -e <Description>             : Update Disk Info
                list      -L <Detail>                                                  : Display disk info
        [options]
                -I                                                                     : Disk Id
                -S                                                                     : Server Id
                -p                                                                     : Disk Path
                -e                                                                     : Description
                -O                                                                     : Disk Pool Id
                -L                                                                     : show information in detail
                -h, --help                                                             : show this help message and exit
"""
        print(Usage)


def disk_control(IpAddress, Port, ServerId, DiskId, Action, logger=None):
    mq = Mq(IpAddress, Port, '/', 'guest', 'guest', MqDiskQueueRoutingKey, MqDiskQueueExchangeName, MqDiskQueueName)
    Data = {"DiskNo": DiskId, "Mode": Action, "ServerId": ServerId}
    if logger is not None:
        logger.debug("Send >> %s" % str(Data))
    print(mq.Sender(Data))


if __name__ == '__main__':
    usage = "Usage: %prog {init|add|delete|update|show|status} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-I', "--Id", dest="DiskId", help='Disk id')
    parser.add_option('-p', "--Path", dest="Path", help='Disk mount path')
    parser.add_option('-O', "--DiskPoolId", dest="DiskPoolId", help='Disk Pool Id')
    parser.add_option('-S', "--Serverid", dest="ServerId", help='Server id')
    parser.add_option('-s', "--State", dest="State", help='Disk state')
    parser.add_option('-z', "--Size", dest="TotalSize", help='Disk Total Size')
    parser.add_option('-e', "--Description", dest="Description", help='Description')
    parser.add_option('-n', "--Name", dest="Name", help='Disk Name')
    parser.add_option('-L', "--Detail", dest="Detail", action='store_true', help='Detail info')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='Debug mode')

    options, args = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    ret, conf = read_conf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf['mgs']['MgsIp']
        IfsPortalPort = int(conf['mgs']['IfsPortalPort'])
        IfsMqPort = int(conf['mgs']['MqPort'])



    options.IpAddress = IfsPortalIp
    options.Port = IfsPortalPort
    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    ServerId = None
    if args[0] in ['remove', 'update', 'start', 'stop', 'set', 'update_size']:
        Res, Errmsg, Ret, AllDiskList = GetDiskInfo(IfsPortalIp, IfsPortalPort, logger=logger)
        if Res == ResOk:
            if Ret.Result == ResultSuccess:
                if len(AllDiskList) == 0:
                    print('ServerId is not found with DiskId %s' % options.DiskId)
                    sys.exit(-1)
                else:
                    Res, Errmsg, Svr = GetServerInfoWithDiskId(AllDiskList, options.DiskId)
                    if Res == ResOk:
                        ServerId = Svr.Id
                    else:
                        print('fail to get Server Id with DiskId: %s' % Errmsg)
                        sys.exit(-1)

        else:
            print('fail to get ServerId with DiskID')
            sys.exit(-1)

    if args[0] == 'add':
        if not options.ServerId:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = AddDisk(IfsPortalIp, IfsPortalPort, options.ServerId, options.Path, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'remove':
        if not options.DiskId:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = RemoveDiskInfo(IfsPortalIp, IfsPortalPort, ServerId, options.DiskId, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update':
        if not options.DiskId:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = UpdateDiskInfo(IfsPortalIp, IfsPortalPort, options.DiskId, Path=options.Path,
                                            DiskPoolId=options.DiskPoolId, Name=options.Name,
                                          Description=options.Description, State=options.State, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update_state':
        if not (options.ServerId and options.DiskId and options.State):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = update_disk_state(IfsPortalIp, IfsPortalPort, options.ServerId, options.DiskId,
                                             options.State, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update_hastate':
        if not (options.ServerId and options.DiskId and options.State):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = update_disk_hastate(IfsPortalIp, IfsPortalPort, options.ServerId, options.DiskId,
                                               options.State, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'update_size':
        if not options.DiskId:
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = UpdateDiskSize(IfsPortalIp, IfsPortalPort, ServerId, options.DiskId,
                                            TotalSize=options.TotalSize, UsedSize=options.TotalSize, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)

    elif args[0] == 'set':
        if len(args) != 2 or not options.DiskId:
            parser.print_help()
            sys.exit(-1)
        else:
            if args[1] not in ['Ro', 'Rw']:
                parser.print_help()
                sys.exit(-1)
            DiskMode = DiskModeRw if args[1] == 'Rw' else DiskModeRd
            Res, Errmsg, Ret = ChangeDiskMode(IfsPortalIp, IfsPortalPort, ServerId, options.DiskId,
                                              DiskMode, logger=logger)
            if Res == ResOk:
                print(Ret.Result, Ret.Message)
            else:
                print(Errmsg)

    elif args[0] == 'start' or args[0] == 'stop':
        if not options.DiskId or args[0] not in ['start', 'stop']:
            parser.print_help()
            sys.exit(-1)
        Action = DiskStart if args[0] == 'start' else DiskStop
        Res, Errmsg, Ret = StartStopDisk(options.IpAddress, options.Port, ServerId, options.DiskId, Action,
                                         logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'list':
        Res, Errmsg, Ret, AllDisks = GetDiskInfo(options.IpAddress, options.Port, logger=logger)
        if Res != ResOk:
            print(Errmsg)
        else:
            ShowDiskInfo(AllDisks, ServerId=options.ServerId, DiskId=options.DiskId, Detail=options.Detail)
    else:
        parser.print_help()
