#!/usr/bin/env python3
"""
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
"""

import os, sys
import pdb

if os.path.dirname(os.path.abspath(os.path.dirname(__file__))) not in sys.path:
    sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from common.init import read_conf
from disk.diskpool_manage import *
from disk.disk_manage import *
from optparse import OptionParser


class MyOptionParser(OptionParser):
    def print_help(self):
        Usage = """
        Usage: ksanDiskpool {add|remove|update|list} [option]
                add          -N <disk pool name> -r <nreplica> -t <class type>         : Create Disk Pool
                remove       -N <disk pool name>                                       : Delete Disk Pool
                addDisk      -N <disk pool name> -n <"disk name">                           : Add Disk to Pool
                removeDisk   -N <disk pool name> -n <"disk name">                           : Delete Disk from Pool
                list                                                                   : Display disk Pool Info
        [options]
                -P                                                                     : Disk Pool Id
                -D                                                                     : Disk Id
                -N                                                                     : Disk Pool Name
                -n                                                                     : Disk Name
                -r                                                                     : Replica Count. 1~3
                -a                                                                     : Disk Pool Class Type. 'STANDARD' or 'ARCHIVE' 
                -c                                                                     : Disk Pool Description
                -l                                                                     : Disk Pool Detail information
                -h, --help                                                             : show this help message and exit
"""
        print(Usage)


if __name__ == '__main__':
    usage = "Usage: %prog {init|add|remove|update|show|status} [option]"
    parser = MyOptionParser(usage=usage)
    parser.add_option('-P', "--Id", dest="DiskPoolId", help='Disk Pool Id')
    parser.add_option('-N', "--DiskPoolName", dest="DiskPoolName", help='Disk Pool Name')
    parser.add_option('-n', "--DiskName", dest="DiskName", help='Disk Name')
    parser.add_option('-D', "--DiskIds", dest="DiskIds", help='Disk Id List to Add to Pool')
    parser.add_option('-c', "--Description", dest="Description", help='Description of Pool')
    parser.add_option('-r', "--Nreplica", dest="replica", type='int', help='Replica Count. 1~3')
    parser.add_option('-t', "--ClassType", dest="DiskPoolType", type='string', help='Disk Pool Type. \'STANDARD\' or \'ARCHIVE\'')
    parser.add_option('-l', "--Detail", dest="Detail", action='store_true', help='Detail info')
    parser.add_option('-d', "--Debug", dest="debug", action='store_true', default=False, help='Debug mode')

    options, args = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
        sys.exit(-1)

    IfsPortalIp = '127.0.0.1'
    IfsPortalPort = 5443
    IfsMqPort = 5672
    ret, conf = read_conf(MonServicedConfPath)
    if ret is True:
        IfsPortalIp = conf['mgs']['MgsIp']
        IfsPortalPort = int(conf['mgs']['IfsPortalPort'])
        IfsMqPort = int(conf['mgs']['MqPort'])


    options.IpAddress = IfsPortalIp
    options.Port = IfsPortalPort
    logger = None
    if options.debug is True:
        logger = Logging(loglevel='debug')
        logger = logger.create()

    """
    ServerId = None
    if args[0] in ['add', 'delete']:
        Res, Errmsg, Ret, AllDiskList = GetDiskInfo(IfsPortalIp, IfsPortalPort, DiskId=options.DiskId, logger=logger)
        if Res == ResOk:
            if Ret.Result == ResultSuccess:
                if len(AllDiskList) == 0:
                    print('ServerId is not found with DiskId %s' % options.DiskId)
                    sys.exit(-1)
                else:
                    Res, Errmsg, Svr = GetServerInfoWithDiskId(AllDiskList, options.DiskId)
                    if Res == ResOk:
                        ServerId = Svr.Id
                    else:
                        print('fail to get Server Id with DiskId: %s' % Errmsg)
                        sys.exit(-1)

        else:
            print('fail to get ServerId with DiskID')
            sys.exit(-1)
    """
    if args[0] == 'add':
        if not (options.DiskPoolName and options.replica and options.DiskPoolType):
            parser.print_help()
            sys.exit(-1)
        if options.replica not in [1, 2, 3] or options.DiskPoolType not in [DiskPoolClassStandard, DiskPoolClassArchive]:
            parser.print_help()
            sys.exit(-1)
        if options.replica == 2:
            ReplicationType = DiskPoolReplica2
        elif options.replica == 3:
            ReplicationType = DiskPoolReplica3
        else:
            ReplicationType = DiskPoolReplica1

        Res, Errmsg, Ret = AddDiskPool(IfsPortalIp, IfsPortalPort, options.DiskPoolName, options.DiskPoolType,
                                       ReplicationType, Description=options.Description,
                                       logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'remove':
        if not (options.DiskPoolId or options.DiskPoolName):
            parser.print_help()
            sys.exit(-1)
        Res, Errmsg, Ret = RemoveDiskPool(IfsPortalIp, IfsPortalPort, DiskPoolId=options.DiskPoolId, DiskPoolName=options.DiskPoolName, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] in ['addDisk', 'removeDisk', 'update']:
        AddDiskIds = None
        DelDiskIds = None
        if args[0] == 'addDisk':
            if not ((options.DiskPoolId and options.DiskIds) or (options.DiskPoolName and options.DiskName)):
                parser.print_help()
                sys.exit(-1)
            if options.DiskIds is not None:
                AddDiskIds = options.DiskIds.split()
            elif options.DiskName is not None:
                AddDiskIds = options.DiskName.split()
            else:
                parser.print_help()
                print("Disk Ids or Disk Name is required")
                sys.exit(-1)
        elif args[0] == 'removeDisk':
            if not ((options.DiskPoolId and options.DiskIds) or (options.DiskPoolName and options.DiskName)):
                parser.print_help()
                sys.exit(-1)
            DelDiskIds = options.DiskIds.split()

        Res, Errmsg, Ret = UpdateDiskPool(IfsPortalIp, IfsPortalPort, DiskPoolId=options.DiskPoolId, AddDiskIds=AddDiskIds, DelDiskIds=DelDiskIds,
                                           DiskPoolName=options.DiskPoolName, Description=options.Description, logger=logger)
        if Res == ResOk:
            print(Ret.Result, Ret.Message)
        else:
            print(Errmsg)
    elif args[0] == 'list':
        Res, Errmsg, Ret, DiskPoolList = GetDiskPoolInfo(options.IpAddress, options.Port, DiskPoolId=options.DiskPoolId, logger=logger)
        if Res != ResOk:
            print(Errmsg)
        else:
            Res, Errmsg, Ret, ServerDetailInfo = GetAllServerDetailInfo(IfsPortalIp, IfsPortalPort, logger=logger)
            if Res != ResOk:
                print(Errmsg)
            else:
                if options.Detail:
                    ShowDiskPoolInfo(DiskPoolList, ServerDetailInfo, Detail=True)
                else:
                    ShowDiskPoolInfo(DiskPoolList, ServerDetailInfo)
    else:
        parser.print_help()
