#!/bin/python
# -*- coding: utf-8 -*-
import sys
import os
import re
import copy
import time
import threading
from threading import Lock
import Queue
import socket
import json
import base64
from errno import *
import thread
import signal
if sys.argv[0][0] == '.':
    sys.path.append('../lib')
from ctypes import *
import pdb
from socket import inet_ntoa
from optparse import OptionParser
from libcommon.drcurl import rest_api
import fcntl
from subprocess import Popen, PIPE

##This function is used for init mgs info.
#insert mgs ip and port
IFS_WATCHER_CONF_PATH = '/usr/local/pspace/etc/watcher.conf'

try:
    if os.path.exists('/lib/librpc.so'):
        librpc = cdll.LoadLibrary('librpc.so')
    elif os.path.exists('/lib64/librpc.so'):
        librpc = cdll.LoadLibrary('librpc.so')
    elif os.path.exists('/lib/libifsrpc.so'):
        librpc = cdll.LoadLibrary('libifsrpc.so')
    elif os.path.exists('/lib64/libifsrpc.so'):
        librpc = cdll.LoadLibrary('libifsrpc.so')
    elif os.path.exists('/usr/lib/python2.7/site-packages/libifsutil/libifsrpc.so'):
        librpc = cdll.LoadLibrary('/usr/lib/python2.7/site-packages/libifsutil/libifsrpc.so')
    elif os.path.exists('/usr/lib/python2.7/site-packages/libcommon/libifsrpc.so'):
        librpc = cdll.LoadLibrary('/usr/lib/python2.7/site-packages/libcommon/libifsrpc.so')
    else:
        librpc = cdll.LoadLibrary('libifsrpc.so')
except OSError as e:
    print "libifsrpc.so: cannot open shared object file. Install InfiniStor-auth-lib rpm "
    sys.exit(-1)

def shcall(command):
    '''Executes a command and returns the result'''
    try:
        p = Popen(command, shell=True, stdout=PIPE, stderr=PIPE,
                close_fds=True)
    except (OSError, ValueError), err:
        return ('', err)
    return p.communicate()

def valid_ip(addr):
    if addr == 'localhost': return True
    try:
        socket.inet_aton(addr)
    except socket.error:
        return False
    return addr.count('.') == 3

def readconf(path, fo=None, lock_sh=True):
    '''Read configuration file'''
    config = {}
    openfile = True
    if fo: openfile = False
    if openfile:
        try:
            fo = open(path)
        except IOError, err:
            return config
    if lock_sh: fcntl.flock(fo.fileno(), fcntl.LOCK_SH)

    for line in fo:
        if line.startswith("filesystem") == True:
            config[line.rsplit("=")[0]] = line.rsplit("=")[1].strip("\n")
            continue

        if line.startswith("s3") == True:
            config[line.rsplit("=")[0]] = line.rsplit("=")[1].strip("\n")
            continue

        mo = re.search('(\w+)\s*=\s*((?:\w|/|\.)+)', line)
        if mo:
            config[mo.group(1)] = mo.group(2)
            
    if lock_sh: fcntl.flock(fo.fileno(), fcntl.LOCK_UN)
    if openfile: fo.close()
    return config

def get_default_WATCHER_conf():
    conf = {
        'dbhost': '192.168.11.229',
        'dbs3': 'event_log',
        'dbport': '3306',
        'dbuser': 'root',
        'dbpass': 'qwe123',
    }

    return conf

##This function is used for init dr client.
#insert DB info, client name, the extension to be skipped
#This is called by ifs_drmanager
def WATCHER_init():
    conf = None
    conf = readconf(IFS_WATCHER_CONF_PATH)
    if conf:
        print 'WARNING: IFS_WATCHER SERVER configuration already exists.'
        print '           All data with this IFS_OBJSTORAGE_WATCHER will be lost...'
        input = raw_input('         Are you sure to re-configure? (y/N) ')
        if input != 'y' and input != 'Y':
            sys.exit(0)
    else:
        conf = get_default_WATCHER_conf()

    # Get WATCHER database ip
    while 1:
        input = raw_input('Enter WATCHER Database IP (default='+conf['dbhost']+'): ')
        if input:
            conf['dbhost'] = input
        break

   # Get database name
    while 1:
        input = raw_input('Enter WATCHER Database Name (default='+conf['dbs3']+'): ')
        if input:
            conf['dbs3'] = input
        break

   # Get database user name 
    while 1:
        input = raw_input('Enter WATCHER Database User Name (default='+conf['dbuser']+'): ')
        if input:
            conf['dbuser'] = input
        break

    # Get db password
    while 1:
        input = raw_input('Enter WATCHER Database password (default='+conf['dbpass']+'): ')
        if input:
            conf['dbpass'] = input
        break

    update_mgsrest_auth_conf(conf)

    tmp ='dbhost='+conf['dbhost']+\
    '\ns3db='+conf['s3db']+\
    '\ndbport='+conf['dbport']+\
    '\ndbuser='+conf['dbuser']+\
    '\ndbpass='+conf['dbpass']+\
    '\n'

    fo = None
    if os.path.isfile(IFS_WATCHER_CONF_PATH):
        os.remove(IFS_WATCHER_CONF_PATH)
    if not os.path.exists(os.path.dirname(IFS_WATCHER_CONF_PATH)):
        os.makedirs(os.path.dirname(IFS_WATCHER_CONF_PATH))

    print 'Creating new configuration.'
    try:
        fo = open(IFS_WATCHER_CONF_PATH, 'a+')
        
    except IOError as exc:
        print str(exc)
        sys.exit(1)


    fo.write(tmp)

    try:
        fo.close()
    except IOError as exc:
        print(exc)
        sys.exit(1)
    else:
        print '\nDone'

sys.path.insert(0, os.path.abspath('..'))
class MyOptionParser(OptionParser):
    def print_help(self):
        print "Usage: ifs_objstorage_WATCHER {init|start|stop|status} options\n"
        print "       init                                          : init WATCHER server "
        print "       start                                         : starts WATCHER server"
        print "       stop                                          : stop WATCHER server"
        print "       restart                                       : restarts WATCHER server"
        print "       status                                        : show WATCHER server status "
        print "       -h, --help                                    : show this help message and exit"


if __name__ == "__main__":
    usage = "Usage: %prog [option] {init|start|stop|status"
    version = "%prog 1.0"
    parser = MyOptionParser(usage=usage, version=version)
    parser.add_option('-f', "--force", action='store_true',
            dest='forced', default=False, help='forced mode init or stop')

    options, args = parser.parse_args()
    conf = None
    if len(args) <= 0:
        parser.print_help()
    else:
        if args[0] == 'init':
            WATCHER_init()
            ret = add_server_to_mgs()
            if not ret:
                print('fail to register WATCHER to mgs')
            out, err = shcall('systemctl enable ifs-watcher')
        elif args[0] == 'start':
            out, err = shcall('systemctl start ifs-watcher')
            print out, err
            print 'start'
        elif args[0] == 'stop':
            out, err = shcall('systemctl stop ifs-watcher')
            print out, err
            print 'stop'
        elif args[0] == 'restart':
            out, err = shcall('systemctl restart ifs-watcher')
            print out, err
            print 'restart'
        elif args[0] == 'status':
            out, err = shcall('systemctl status ifs-watcher')
            if "(running)" in out:
                print 'ifs-watcher      ..... ok'
            else:
                print 'ifs-watcher      ..... not ok'
        else:
            parser.print_help()